"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCancellationTokenHost = void 0;
const vscode = __importStar(require("vscode-languageserver"));
function createCancellationTokenHost(_cancellationPipeName) {
    if (_cancellationPipeName === undefined) {
        return {
            createCancellationToken(original) {
                return original ?? vscode.CancellationToken.None;
            },
        };
    }
    const cancellationPipeName = _cancellationPipeName;
    const fs = require('fs');
    return {
        createCancellationToken,
    };
    function createCancellationToken(original) {
        const mtime = getMtime();
        let currentMtime = mtime;
        let updateAt = Date.now();
        const token = {
            get isCancellationRequested() {
                if (original?.isCancellationRequested) {
                    return true;
                }
                // debounce 20ms
                if (currentMtime === mtime && Date.now() - updateAt >= 20) {
                    currentMtime = getMtime();
                    updateAt = Date.now();
                }
                return currentMtime !== mtime;
            },
            onCancellationRequested: vscode.Event.None,
        };
        return token;
    }
    function getMtime() {
        try {
            const stat = fs.statSync(cancellationPipeName, { throwIfNoEntry: false });
            return stat?.mtime.valueOf() ?? -1;
        }
        catch {
            return -1;
        }
    }
}
exports.createCancellationTokenHost = createCancellationTokenHost;
//# sourceMappingURL=cancellationPipe.js.map