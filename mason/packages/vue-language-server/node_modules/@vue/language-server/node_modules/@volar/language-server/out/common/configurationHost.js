"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigurationHost = void 0;
const vscode = __importStar(require("vscode-languageserver"));
function createConfigurationHost(params, connection) {
    const callbacks = new Set();
    const cache = new Map();
    connection.onDidChangeConfiguration(async () => {
        cache.clear();
        for (const cb of callbacks) {
            cb();
        }
    });
    return {
        ready() {
            if (params.capabilities.workspace?.didChangeConfiguration?.dynamicRegistration) {
                connection.client.register(vscode.DidChangeConfigurationNotification.type);
            }
        },
        async getConfiguration(section, scopeUri) {
            if (!scopeUri && params.capabilities.workspace?.didChangeConfiguration) {
                if (!cache.has(section)) {
                    cache.set(section, await getConfigurationWorker(section, scopeUri));
                }
                return cache.get(section);
            }
            return await getConfigurationWorker(section, scopeUri);
        },
        onDidChangeConfiguration(cb) {
            callbacks.add(cb);
            return {
                dispose() {
                    callbacks.delete(cb);
                },
            };
        },
    };
    async function getConfigurationWorker(section, scopeUri) {
        return (await connection.workspace.getConfiguration({ scopeUri, section })) ?? undefined /* replace null to undefined */;
    }
}
exports.createConfigurationHost = createConfigurationHost;
//# sourceMappingURL=configurationHost.js.map