"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const transformer = __importStar(require("../transformer"));
const common_1 = require("../utils/common");
const cancellation_1 = require("../utils/cancellation");
function register(context) {
    return (uri, token = cancellation_1.NoneCancellationToken) => {
        return (0, featureWorkers_1.documentFeatureWorker)(context, uri, file => !!file.capabilities.documentSymbol, async (service, document) => {
            if (token.isCancellationRequested)
                return;
            return service.provideDocumentSymbols?.(document, token);
        }, (data, map) => map
            ? data
                .map(symbol => transformer.asDocumentSymbol(symbol, range => map.toSourceRange(range)))
                .filter(common_1.notEmpty)
            : data, results => {
            for (let i = 0; i < results.length; i++) {
                for (let j = 0; j < results.length; j++) {
                    if (i === j)
                        continue;
                    results[i] = results[i].filter(child => {
                        for (const parent of results[j]) {
                            if ((0, common_1.isInsideRange)(parent.range, child.range)) {
                                parent.children ??= [];
                                parent.children.push(child);
                                return false;
                            }
                        }
                        return true;
                    });
                }
            }
            return results.flat();
        });
    };
}
exports.register = register;
//# sourceMappingURL=documentSymbols.js.map