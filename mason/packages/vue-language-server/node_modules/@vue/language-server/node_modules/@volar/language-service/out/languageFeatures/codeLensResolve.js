"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const references = __importStar(require("./references"));
const cancellation_1 = require("../utils/cancellation");
function register(context) {
    const findReferences = references.register(context);
    return async (item, token = cancellation_1.NoneCancellationToken) => {
        const data = item.data;
        if (data?.kind === 'normal') {
            const service = context.services[data.serviceId];
            if (!service.resolveCodeLens)
                return item;
            Object.assign(item, data.original);
            item = await service.resolveCodeLens(item, token);
            // item.range already transformed in codeLens request
        }
        if (data?.kind === 'references') {
            let references = await findReferences(data.uri, item.range.start, token) ?? [];
            const service = context.services[data.serviceId];
            const document = context.getTextDocument(data.uri);
            if (document && service.resolveReferencesCodeLensLocations) {
                references = await service.resolveReferencesCodeLensLocations(document, data.range, references, token);
            }
            item.command = context.commands.showReferences.create(data.uri, data.range.start, references);
        }
        return item;
    };
}
exports.register = register;
//# sourceMappingURL=codeLensResolve.js.map