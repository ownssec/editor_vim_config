"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const transformer = __importStar(require("../transformer"));
const common_1 = require("../utils/common");
const cancellation_1 = require("../utils/cancellation");
function register(context) {
    return async (query, token = cancellation_1.NoneCancellationToken) => {
        const symbolsList = [];
        for (const service of Object.values(context.services)) {
            if (token.isCancellationRequested)
                break;
            if (!service.provideWorkspaceSymbols)
                continue;
            const embeddedSymbols = await service.provideWorkspaceSymbols(query, token);
            if (!embeddedSymbols)
                continue;
            const symbols = embeddedSymbols.map(symbol => transformer.asWorkspaceSymbol(symbol, loc => {
                if (context.documents.isVirtualFileUri(loc.uri)) {
                    for (const [_, map] of context.documents.getMapsByVirtualFileUri(loc.uri)) {
                        const range = map.toSourceRange(loc.range);
                        if (range) {
                            return { uri: map.sourceFileDocument.uri, range };
                        }
                    }
                }
                else {
                    return loc;
                }
            })).filter(common_1.notEmpty);
            symbolsList.push(symbols);
        }
        return symbolsList.flat();
    };
}
exports.register = register;
//# sourceMappingURL=workspaceSymbols.js.map